@startuml
interface pumlFromJava.classes.Type {
~ isPublic(String: parameters): boolean
~ isPrivate(String : parameters): boolean
~ isProtected(String : parameters): boolean
~ isAbstract(String : parameters): boolean
~ isStatic(String : parameters): boolean
~ getVisibility(): String
}
class pumlFromJava.classes.Object {
- String name: String
- attributes: Attributs[*]
- methods: Methode[*]
- extendsClasses: String[*]
- implementsInterfaces: String[*]
- String namePackage: String
+ <<Create>> Object()
+ getName(): String
+ setName(String : name)
+ getAttributes(): Attributs[*]
+ setAttributes(ArrayList<Attributs>: attributes)
+ getMethods(): Methode[*]
+ setMethods(ArrayList<Methode>: methods)
+ getExtendsClasses(): String[*]
+ setExtendsClasses(ArrayList<String>)
+ getImplementsInterfaces(): String[*]
+ setImplementsInterfaces(ArrayList<String>)
+ getNamePackage(): String
+ setNamePackage(String)
}
class pumlFromJava.PumlDiagram {
- ArrayList<Classe> classes: Classe[*]
- ArrayList<Interface> interfaces: Interface[*]
- ArrayList<Enumerations> enumerations: Enumerations[*]
+ <<Create>> PumlDiagram()
+ getClasses(): Classe[*]
+ setClasses(ArrayList<Classe>: classes)
+ addClasse(Classe: classe)
+ getInterfaces(): Interface[*]
+ setInterfaces(ArrayList<Interface>: interfaces)
+ addInterface(Interface: interface)
+ getEnumerations(): Enumerations[*]
+ setEnumerations(ArrayList<Enumerations>: enumerations)
+ addEnumeration(Enumerations: enumeration)
}
class pumlFromJava.classes.Interface {
}
class pumlFromJava.Java2Puml {
+ {static} main(String[]: args)
}
class pumlFromJava.FirstDoclet {
+ init(Locale,Reporter)
+ getName(): String
+ getSupportedOptions(): Set<? extends Option>
+ getSupportedSourceVersion(): SourceVersion
+ run(DocletEnvironment: docletenvironnement): boolean
- dumpElement(Element: element)
}
class pumlFromJava.PumlDoclet {
- fileCreator: CreateFic
- pumlDiagram: PumlDiagram
- String choixDc: String
+ void init(Locale,Reporter)
+ getName(): String
+ getSupportedOptions(): Set<? extends Option>
+ getSupportedSourceVersion(): SourceVersion
+ run(DocletEnvironment: docletenvironnement): boolean
- dumpElement(Element: element)
}
abstract class pumlFromJava.Option {
- name: String
- hasArg: boolean
- description: String
- parameters: String
~ <<Create>> Option(String,boolean,String,String)
+ getArgumentCount(): int
+ getDescription(): String
+ getKind(): Kind
+ getNames(): String[*]
+ getParameters(): String
}
class pumlFromJava.classes.SaveInfo {
+ {static} addelement(Element: element,PumlDiagram: pumlDiagram)
- {static} setAttribut(Element: element): Attributs
- {static} setMethode(Element: element): Methode
- {static} setClasse(Element: element,ArrayList<Attributs>: attributes,ArrayList<Methode>: methods,String: namePackage): Classe
- {static} setInterface(Element element,ArrayList<Attributs> attributes,ArrayList<Methode> methods,String namePackage): Interface
- {static} setEnumeration(Element element,ArrayList<String> attributes,String namePackage): Enumerations
}
class pumlFromJava.PumlWriter {
- {static} writeEntete(BufferedWriter: writer)
- {static} writeFin(BufferedWriter: writer)
- {static} writeType(Type,BufferedWriter: writer)
- {static} drawAttribut(pumlFromJava.classes.Object: object,BufferedWriter: writer)
- {static} drawAttribut(Enumerations object,BufferedWriter writer)
- {static} drawMethode(Object: object,BufferedWriter: writer)
+ {static} fillPuml(PumlDiagram: pumlDiagram,String: out, String: choixDc)
- {static} drawDCA(PumlDiagram: pumlDiagram,BufferedWriter: writer)
- {static} drawDCC(PumlDiagram: pumlDiagram,BufferedWriter: writer)
}
class pumlFromJava.classes.Methode {
- name: String
- returnType: String
- visibility: String
- parameters: String[*]
+ <<Create>> Methode()
+ getName(): String
+ setName(String: name)
+ getReturnType(): String
+ setReturnType(String: returnType)
+ getVisibility(): String
+ setVisibility(String: visibility)
+ getParameters(): String[*]
+ setParameters(ArrayList<String>: parameters)
}
class pumlFromJava.classes.Classe {
}
class pumlFromJava.classes.Attributs {
- name: String
- type: TypeMirror
- visibility: String
+ <<Create>> Attributs()
+ getName(): String
+ setName(String: name)
+ getType(): TypeMirror
+ setType(TypeMirror: type)
+ getVisibility(): String
+ setVisibility(String: visibility)
}
class pumlFromJava.CreateFic {
+ {static} DEFAULT_NAME: String
+ {static} DEFAULT_PATH: String
- outFileName: String
- outFilePath: String
+ creationFichier(): String
+ createFile(String: path)
+ getOutFileName(): String
+ setOutFileName(String: outfilename)
+ getOutFilePath(): String
+ setOutFilePath(String: outfilepath)
}
class pumlFromJava.classes.Enumerations {
- name: String
- attributes: String[*]
- namePackage: String
+ <<Create>> Enumerations()
+ getName(): String
+ setName(String: name)
+ getAttributes(): String[*]
+ setAttributes(ArrayList<String>: attributes)
+ getNamePackage(): String
+ setNamePackage(String: namePackage)
}


pumlFromJava.classes.Object <|-- pumlFromJava.classes.Interface
jdk.javadoc.doclet.Doclet <|.. pumlFromJava.FirstDoclet
jdk.javadoc.doclet.Doclet <|.. pumlFromJava.PumlDoclet
pumlFromJava.PumlDoclet +.. pumlFromJava.PumlDoclet.Option
pumlFromJava.Option <|.. pumlFromJava.PumlDoclet.Option
pumlFromJava.classes.Type <|.. pumlFromJava.classes.Methode
pumlFromJava.classes.Object <|-- pumlFromJava.classes.Classe
pumlFromJava.classes.Type <|.. pumlFromJava.classes.Attributs

pumlFromJava.Java2Puml ..> pumlFromJava.PumlDoclet: <<use>>

pumlFromJava.PumlDoclet ..> pumlFromJava.classes.Object: <<use>>
pumlFromJava.PumlDoclet ..> pumlFromJava.PumlDiagram: <<use>>
pumlFromJava.PumlDoclet ..> pumlFromJava.Option: <<use>>
pumlFromJava.PumlDoclet ..> pumlFromJava.CreateFic: <<use>>
pumlFromJava.PumlDoclet ..> pumlFromJava.classes.SaveInfo: <<use>>

pumlFromJava.PumlDiagram ..> pumlFromJava.PumlWriter: <<use>>
pumlFromJava.PumlDiagram -->"* \n classes" pumlFromJava.classes.Classe: contient
pumlFromJava.PumlDiagram -->"* \n interfaces" pumlFromJava.classes.Interface: contient
pumlFromJava.PumlDiagram -->"* \n enumerations" pumlFromJava.classes.Enumerations: contient

pumlFromJava.classes.Object -->"* \n attributs" pumlFromJava.classes.Attributs
pumlFromJava.classes.Object -->"* \n methodes" pumlFromJava.classes.Methode
pumlFromJava.classes.Object -->"1 \n extendsClasses" pumlFromJava.classes.Classe
pumlFromJava.classes.Object -->"1 \n implementsinterface" pumlFromJava.classes.Interface

pumlFromJava.classes.Type -->"* \n attributs" pumlFromJava.classes.Attributs
pumlFromJava.classes.Type -->"* \n methodes" pumlFromJava.classes.Methode

pumlFromJava.classes.SaveInfo ..> pumlFromJava.classes.Classe: <<use>>
pumlFromJava.classes.SaveInfo ..> pumlFromJava.classes.Interface: <<use>>
pumlFromJava.classes.SaveInfo ..> pumlFromJava.classes.Attributs: <<use>>
pumlFromJava.classes.SaveInfo ..> pumlFromJava.classes.Methode: <<use>>


@enduml