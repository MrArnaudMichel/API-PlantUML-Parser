@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

package pumlFromJava {
class CreateFile {
	+ {static} DEFAULT_NAME : String
	+ {static} DEFAULT_PATH : String
	- outFileName : String
	- outFilePath : String
	+<<Create>> CreateFile()
	+ creationFichier() : String
	+ createFile(fileName : String)
	+ getOutFileName() : String
	+ setOutFileName(outFileName : String)
	+ getOutFilePath() : String
	+ setOutFilePath(outFilePath : String)
}

class SaveOption {
	+ typeDiagram : String
	+ strPrimitive : boolean
	+ association : boolean
	+ constructor : boolean
	+ method : boolean
	+ drawPrimitive : boolean
	+ drawUnPrimitive : boolean
	+ drawExtends : boolean
	+ drawImplements : boolean
	+<<Create>> SaveOption()
	+ getTypeDiagram() : String
	+ setTypeDiagram(typeDiagram : String)
	+ getStrPrimitive() : Boolean
	+ setStrPrimitive(strPrimitive : boolean)
	+ getAssociation() : Boolean
	+ setAssociation(association : boolean)
	+ getConstructor() : Boolean
	+ setConstructor(constructor : boolean)
	+ getMethod() : Boolean
	+ setMethod(method : boolean)
	+ getDrawPrimitive() : Boolean
	+ setDrawPrimitive(drawPrimitive : boolean)
	+ getDrawUnPrimitive() : Boolean
	+ setDrawUnPrimitive(drawUnPrimitive : boolean)
	+ getDrawExtends() : Boolean
	+ setDrawExtends(drawExtends : boolean)
	+ getDrawImplements() : Boolean
	+ setDrawImplements(drawImplements : boolean)
}

class Package {
	- name : String
	+<<Create>> Package()
	+<<Create>> Package(element : Element)
	+ getClasses() : Classe[*]
	+ setClasses(classes : Classe[*])
	+ addClasse(classe : Classe)
	+ getInterfaces() : Interface[*]
	+ setInterfaces(interfaces : Interface[*])
	+ addInterface(interface1 : Interface)
	+ getEnumerations() : Enumerations[*]
	+ setEnumerations(enumerations : Enumerations[*])
	+ addEnumeration(enumeration : Enumerations)
	+ getPackages() : Package[*]
	+ setPackages(packages : Package[*])
	+ addPackage(package1 : Package)
	+ getName() : String
	+ setName(name : String)
}

class PumlWriter {
	+<<Create>> PumlWriter()
	- {static} writeEntete(writer : BufferedWriter)
	- {static} writeFin(writer : BufferedWriter)
	+ {static} fillPuml(saveOption : SaveOption, saveOption : SaveOption, saveOption : SaveOption, )
	- {static} drawDC(saveOption : SaveOption, saveOption : SaveOption, saveOption : SaveOption, )
	- {static} drawLink(saveOption : SaveOption, saveOption : SaveOption, saveOption : SaveOption, )
}

class FirstDoclet {
	+<<Create>> FirstDoclet()
	+ init(reporter : Reporter, reporter : Reporter, )
	+ getName() : String
	+ getSupportedOptions() : Option[*]
	+ getSupportedSourceVersion() : SourceVersion
	+ run(environment : DocletEnvironment) : Boolean
	- dumpElement(element : Element)
}

class PumlDoclet {
	+<<Create>> PumlDoclet()
	+ init(reporter : Reporter, reporter : Reporter, )
	+ getName() : String
	+ getSupportedOptions() : Option[*]
	+ getSupportedSourceVersion() : SourceVersion
	+ run(environment : DocletEnvironment) : Boolean
	- dumpElement(element : Element)
}

class Java2Puml {
	+<<Create>> Java2Puml()
	+ {static} main(args : String[])
}

class Option {
	- name : String
	- hasArg : boolean
	- description : String
	- parameters : String
	<<Create>> Option(parameters : String, parameters : String, parameters : String, parameters : String, )
	+ getArgumentCount() : Integer
	+ getDescription() : String
	+ getKind() : Kind
	+ getNames() : String[*]
	+ getParameters() : String
}

package classes {
class Contructor {
	- name : String
	- visibility : String
	- parameters : String[*]
	+<<Create>> Contructor(name : String, name : String, )
	+ strDraw() : String
	- typeConstructor(visibility : String) : String
	+ getName() : String
	+ setName(name : String)
	+ getVisibility() : String
	+ setVisibility(visibility : String)
	+ getParameters() : String[][*]
	+ setParameters(parameters : String[][*])
}

class Instance {
	- name : String
	- extendsClasse : String
	- namePackage : String
	+<<Create>> Instance()
	+ getName() : String
	+ setName(name : String)
	+ getMethods() : Methode[*]
	+ setMethods(methods : Methode[*])
	+ getExtendsClasse() : String
	+ setExtendsClasse(extendsClasse : String)
	+ getImplementsInterface() : TypeMirror[*]
	+ setImplementsInterface(implementsInterface : TypeMirror[*])
	+ getNamePackage() : String
	+ setNamePackage(namePackage : String)
}

class Enumerations {
	- name : String
	- attributes : String[*]
	- namePackage : String
	+<<Create>> Enumerations(element : Element)
	+ strDraw(saveOption : SaveOption) : String
	+ getName() : String
	+ setName(name : String)
	+ getAttributes() : String[*]
	+ setAttributes(attributes : String[*])
	+ getNamePackage() : String
	+ setNamePackage(namePackage : String)
}

class Interface {
	+<<Create>> Interface(element : Element)
	+ strDraw(saveOption : SaveOption) : String
	+ strRelation(saveOption : SaveOption) : String
}

class Methode {
	- parameters : String[*]
	- name : String
	- returnType : String
	- visibility : String
	- isOverride : String
	+<<Create>> Methode(e : Element)
	+ {static} setArray(type : String) : String
	+ strDraw() : String
	- writeType() : String
	+ getIsOverride() : String
	+ setIsOverride(isOverride : String)
	+ getParameters() : String[][*]
	+ getName() : String
	+ setName(name : String)
	+ getReturnType() : String
	+ setReturnType(returnType : String)
	+ getVisibility() : String
	+ setVisibility(visibility : String)
}

class Attributs {
	- name : String
	- visibility : String
	+<<Create>> Attributs(element : Element)
	+ strDrawAttributs() : String
	- writeType() : String
	+ getName() : String
	+ setName(name : String)
	+ getType() : TypeMirror
	+ setType(type : TypeMirror)
	+ getVisibility() : String
	+ setVisibility(visibility : String)
}

class Classe<< Arnaud, Benjamin >> {
	- usedClasses : String[*]
	- author : String[*]
	+<<Create>> Classe(element : Element)
	+ strDrawDiagram(saveOption : SaveOption) : String
	+ strRelation(saveOption : SaveOption) : String
	- drawUse()
}

interface Type<<interface>> {
	+ isPublic(parameters : String) : Boolean
	+ isPrivate(parameters : String) : Boolean
	+ isProtected(parameters : String) : Boolean
	+ isAbstract(parameters : String) : Boolean
	+ isStatic(parameters : String) : Boolean
	+ getVisibility() : String
}

Type <|.. Contructor

Methode" [*] \n methods" <--* Instance
TypeMirror" [*] \n implementsInterface" <--* Instance

Enumerations ..>  "<<use>>" SaveOption
Enumerations ..>  "<<use>>" Element

Instance <|-- Interface
Interface ..>  "<<use>>" SaveOption
Interface ..>  "<<use>>" Element

Type <|.. Methode
Methode ..>  "<<use>>" Element

Type <|.. Attributs
TypeMirror" 1 \n type" <--* Attributs
Attributs ..>  "<<use>>" Element

Instance <|-- Classe
Type <|.. Classe
Attributs" [*] \n attributes" <--* Classe
Contructor" [*] \n constructors" <--* Classe
Classe ..>  "<<use>>" SaveOption
Classe ..>  "<<use>>" Element


}


Classe" [*] \n classes" <--* Package
Interface" [*] \n interfaces" <--* Package
Enumerations" [*] \n enumerations" <--* Package
Package" [*] \n packages" <--* Package
Package ..>  "<<use>>" Element

PumlWriter ..>  "<<use>>" BufferedWriter
PumlWriter ..>  "<<use>>" SaveOption

Doclet <|.. FirstDoclet
FirstDoclet ..>  "<<use>>" Reporter
FirstDoclet ..>  "<<use>>" SourceVersion
FirstDoclet ..>  "<<use>>" DocletEnvironment
FirstDoclet ..>  "<<use>>" Element

Doclet <|.. PumlDoclet
CreateFile" 1 \n fileCreator" <--* PumlDoclet
SaveOption" 1 \n saveOption" <--* PumlDoclet
Package" 1 \n pumlDiagram" <--* PumlDoclet
PumlDoclet ..>  "<<use>>" Reporter
PumlDoclet ..>  "<<use>>" SourceVersion
PumlDoclet ..>  "<<use>>" DocletEnvironment
PumlDoclet ..>  "<<use>>" Element


Option <|.. Option
Option ..>  "<<use>>" Kind

}

@enduml